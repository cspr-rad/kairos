use kairos_prover_server_lib::{run_server, Proof, Prover};
// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{PROVE_BATCH_ELF, PROVE_BATCH_ID};
use risc0_zkvm::{ExecutorEnv, Receipt};

#[tokio::main]
async fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // Start the server with the Risc0Prover
    run_server::<Risc0Prover>().await;
}

pub struct Risc0Prover;

impl Prover for Risc0Prover {
    type Error = String;
    type ProofSystemData = Receipt;

    fn prove_execution(
        proof_inputs: kairos_circuit_logic::ProofInputs,
    ) -> Result<Proof<Receipt>, String> {
        let env = ExecutorEnv::builder()
            .write(&proof_inputs)
            .map_err(|e| format!("Error in ExecutorEnv builder write: {e}"))?
            .build()
            .map_err(|e| format!("Error in ExecutorEnv builder build: {e}"))?;

        let receipt = risc0_zkvm::default_prover()
            .prove(env, PROVE_BATCH_ELF)
            .map_err(|e| format!("Error in risc0_zkvm prove: {e}"))?;

        let logical_outputs = receipt
            .journal
            .decode()
            .map_err(|e| format!("Error in receipt journal decode: {e}"))?;

        receipt
            .verify(PROVE_BATCH_ID)
            .map_err(|e| format!("Error in risc0_zkvm verify: {e}"))?;

        Ok(Proof {
            logical_outputs,
            proof_system_data: receipt,
        })
    }
}
