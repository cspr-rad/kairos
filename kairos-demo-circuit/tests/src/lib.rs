#[test]
fn example_rollup_proof(){
    // These constants represent the RISC-V ELF and the image ID generated by risc0-build.
    // The ELF is used for proving and the ID is used for verification.
    use circuits::{
        DEMO_CIRCUIT_ELF, DEMO_CIRCUIT_ID
    };
    use risc0_zkvm::{default_prover, ExecutorEnv};
    use sha2::Sha256;

    use kairos_trie::{
        stored::{memory_db::MemoryDb, merkle::SnapshotBuilder}, KeyHash, NodeHash, TrieRoot,
        stored::merkle::Snapshot,
        DigestHasher
    };

    use std::rc::Rc;
    use types::{DemoCircuitInput, Transaction};

    let db: Rc<MemoryDb<[u8; 8]>> = Rc::new(MemoryDb::<[u8; 8]>::empty());
    let old_root_hash: TrieRoot<NodeHash> = TrieRoot::default();

    let operations: Vec<Transaction> = vec![];
    let builder: SnapshotBuilder<Rc<MemoryDb<[u8; 8]>>, [u8; 8]> = SnapshotBuilder::empty(db).with_trie_root_hash(old_root_hash);
    let txn: kairos_trie::Transaction<SnapshotBuilder<Rc<MemoryDb<[u8; 8]>>, [u8; 8]>, [u8; 8]> = kairos_trie::Transaction::from_snapshot_builder(builder);
    let new_root_hash: TrieRoot<NodeHash> = txn.commit(&mut DigestHasher::<Sha256>::default()).unwrap();
    let snapshot: Snapshot<[u8; 8]> = txn.build_initial_snapshot();

    let circuit_input: DemoCircuitInput = DemoCircuitInput{
        batch: operations,
        snapshot: snapshot,
        new_root_hash: new_root_hash,
        old_root_hash: old_root_hash
    };
    let env = ExecutorEnv::builder()
        .write(&circuit_input)
        .unwrap()
        .build()
        .unwrap();

    let prover = default_prover();
    let receipt: risc0_zkvm::Receipt = prover
        .prove(env, DEMO_CIRCUIT_ELF)
        .unwrap();

    let _output: TrieRoot<NodeHash> = receipt.journal.decode().unwrap();
    receipt
        .verify(DEMO_CIRCUIT_ID)
        .expect("Failed to verify proof!");
}
