// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    DEMO_CIRCUIT_ELF, DEMO_CIRCUIT_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv};
use sha2::Sha256;

use kairos_trie::{
    stored::{memory_db::MemoryDb, merkle::SnapshotBuilder, DatabaseSet}, KeyHash, NodeHash, Transaction, TrieRoot,
    stored::{
        merkle::Snapshot,
        Store,
    },
    DigestHasher
};

use std::{
    collections::{hash_map, HashMap},
    rc::Rc,
};
use types::{Operation, Value};
use types::DemoCircuitInput;

fn main() {
    let map: HashMap<KeyHash, u64> = HashMap::from_iter([(KeyHash([0; 8]), 0)]);
    let maps: Vec<HashMap<KeyHash, u64>> = vec![map.clone(), map];

    let db = Rc::new(MemoryDb::<[u8; 8]>::empty());
    let mut prior_root_hash: TrieRoot<NodeHash> = TrieRoot::default();
    /*
        - use snapshot builder with a predefined set of Operations
        - commit the DemoCircuitInput
        - run the circuit
    */
    
    
    /*
    // For example:
    let input: u32 = 15 * u32::pow(2, 27) + 1;
    let env = ExecutorEnv::builder()
        .write(&input)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Produce a receipt by proving the specified ELF binary.
    let receipt = prover
        .prove(env, DEMO_CIRCUIT_ELF)
        .unwrap();

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    let _output: u32 = receipt.journal.decode().unwrap();

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt
        .verify(DEMO_CIRCUIT_ID)
        .unwrap();*/
}
